openapi: 3.0.0
servers:
  - url: https://poper-ops-interview-02.herokuapp.com/
info:
  title: Tutoring
  description: tutoring
  version: '1.0.0'
paths:
  /oauth/token:
    parameters:
      - $ref: '#/components/parameters/ContentType'
      - $ref: '#/components/parameters/Accept'
    post:
      summary: Login
      description: Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: Fixed value password
                  enum: [ password ]
                  example: password
                client_id:
                  type: integer
                  description: Fixed value 1
                  enum: [ 0 ]
                  example: 1
                scope:
                  type: string
                  description: Fixed value empty string
                  example: ''
                username:
                  type: string
                  description: User name
                  example: admin
                password:
                  type: string
                  description: Password
                  example: 123456
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Fix value 'me'
      - $ref: '#/components/parameters/ContentType'
      - $ref: '#/components/parameters/Accept'
      - $ref: '#/components/parameters/Authorization'
    get:
      summary: Get user information
      description: Get user information
      responses:
        '200':
          description: Get user information successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/students:
    parameters:
      - $ref: '#/components/parameters/ContentType'
      - $ref: '#/components/parameters/Accept'
      - $ref: '#/components/parameters/Authorization'
    get:
      summary: Get students of the teacher
      parameters:
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: A list of students
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentListResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/courses:
    parameters:
      - $ref: '#/components/parameters/ContentType'
      - $ref: '#/components/parameters/Accept'
      - $ref: '#/components/parameters/Authorization'
    get:
      summary: Get Courses
      parameters:
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: A list of courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseListResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a course
      description: Create a course
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseRequestBody'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/invoices:
    parameters:
      - $ref: '#/components/parameters/ContentType'
      - $ref: '#/components/parameters/Accept'
      - $ref: '#/components/parameters/Authorization'
    get:
      summary: Get Invoice
      parameters:
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: A list of invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceListResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a invoice
      description: Create a invoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoiceRequestBody'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/omise/checkout:
    parameters:
      - $ref: '#/components/parameters/ContentType'
      - $ref: '#/components/parameters/Accept'
      - $ref: '#/components/parameters/Authorization'
    post:
      summary: Checkout
      description: Checkout
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                invoice_id:
                  type: integer
                  description: Invoice id
                  example: 1
                token:
                  type: string
                  description: Omise token
                  example: tokn_test_5zxefqv72kiezwh64ks
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  parameters:
    ContentType:
      name: Content-Type
      in: header
      description: The value must be `application/json`
      required: true
      schema:
        type: string
        example: application/json
    Accept:
      name: Accept
      in: header
      description: The value must be `application/json`
      required: true
      schema:
        type: string
        example: application/json
    Authorization:
      name: Authorization
      in: header
      description: Bearer token
      required: true
      schema:
        type: string
    Page:
      name: page
      in: query
      description: page number
      required: false
      schema:
        type: integer
  schemas:
    PaginationLinks:
      type: object
      description: Pagination links for navigating through pages of data.
      properties:
        first:
          type: string
          format: uri
          description: URL to the first page of data.
          example: https://poper-ops-interview-02.herokuapp.com/api/invoices?page=1
        last:
          type: string
          format: uri
          description: URL to the last page of data.
          example: https://poper-ops-interview-02.herokuapp.com/api/invoices?page=1
        prev:
          type: string
          nullable: true
          format: uri
          description: URL to the previous page of data, if available.
          example: https://poper-ops-interview-02.herokuapp.com/api/invoices?page=2
        next:
          type: string
          nullable: true
          format: uri
          description: URL to the next page of data, if available.
          example: https://poper-ops-interview-02.herokuapp.com/api/invoices?page=1
    PaginationMeta:
      type: object
      description: Metadata about the pagination state.
      properties:
        current_page:
          type: integer
          description: The current page number.
          example: 1
        from:
          type: integer
          description: The starting record number on the current page.
          example: 1
        last_page:
          type: integer
          description: The total number of pages available.
          example: 1
        links:
          type: array
          description: Links for pagination navigation.
          items:
            type: object
            properties:
              url:
                type: string
                nullable: true
                format: uri
                description: URL to a specific page.
                example: https://poper-ops-interview-02.herokuapp.com/api/invoices?page=1
              label:
                type: string
                description: Label describing the page link.
                example: "1"
              active:
                type: boolean
                description: Indicates if the link is for the current page.
                example: true
        path:
          type: string
          format: uri
          description: The base URL path for the pagination.
          example: https://poper-ops-interview-02.herokuapp.com/api/invoices
        per_page:
          type: integer
          description: The number of records per page.
          example: 15
        to:
          type: integer
          description: The ending record number on the current page.
          example: 5
        total:
          type: integer
          description: The total number of records available.
          example: 5
    User:
      type: object
      properties:
        id:
          type: integer
          description: ID
          example: 1
        teacher_user_id:
          type: integer
          description: Teacher user id
          example: 1
        type:
          type: integer
          description: '0ï¼šdefault, 1: student, 2: teacher'
          enum: [ 0, 1, 2 ]
          example: 1
        username:
          type: string
          description: user name
          example: admin
        name:
          type: string
          description: name
          example: Admin
    StudentListResponse:
      type: object
      description: Response object for a list of students.
      properties:
        data:
          type: array
          description: List of students.
          items:
            $ref: '#/components/schemas/User'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    CreateInvoiceRequestBody:
      type: object
      properties:
        course_id:
          type: integer
          description: Course id
          example: 1
    Invoice:
      allOf:
        - $ref: '#/components/schemas/CreateInvoiceRequestBody'
        - type: object
          properties:
            id:
              type: integer
              description: ID
              example: 1
            teacher_user_id:
              type: integer
              description: Teacher user id
              example: 1
            student_user_id:
              type: integer
              description: ID
              example: 1
            course_id:
              type: integer
              description: ID
              example: 1
            status:
              type: integer
              description: '100: created, 200: pending_payment, 300: paid'
              enum: [100, 200, 300]
              example: 100
            course:
              $ref: '#/components/schemas/Course'
            student:
              $ref: '#/components/schemas/User'
    InvoiceListResponse:
      type: object
      description: Response object for a list of invoices.
      properties:
        data:
          type: array
          description: List of invoices.
          items:
            $ref: '#/components/schemas/Invoice'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    CreateCourseRequestBody:
      type: object
      properties:
        student_user_id:
          type: integer
          description: Student user id
          example: 1
        name:
          type: string
          description: name
          example: course of 2024-05
        amount:
          type: integer
          description: Amount
          example: 101
        date:
          type: string
          description: Date Y-m
          example: 2024-05
    Course:
      allOf:
        - $ref: '#/components/schemas/CreateCourseRequestBody'
        - type: object
          properties:
            id:
              type: integer
              description: ID
              example: 1
            invoice:
              oneOf:
                - $ref: '#/components/schemas/Invoice'
                - type: 'null'
            student:
              $ref: '#/components/schemas/User'
    CourseListResponse:
      type: object
      description: Response object for a list of courses.
      properties:
        data:
          type: array
          description: List of courses.
          items:
            $ref: '#/components/schemas/Course'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Validation error
                example: The xxx is required
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Internal server error
                example: Error
